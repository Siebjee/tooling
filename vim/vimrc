" Toggle for easy access to paste/no paste
nnoremap <leader>p :set paste!<cr>

" Put selection into pbcopy
vnoremap <leader>c !pbcopy<cr>u

" Delete command W for sudo write, and replace it with SW
delcommand W
command! SW execute 'w !sudo tee % > /dev/null' <bar> edit!

" Splits always below active pane
set splitbelow
" Splits always right of active pane
set splitright

set tabstop=2

" Show invisible characters
set list
set listchars=tab:»\ ,trail:·,nbsp:·,extends:>,precedes:<

highlight NonText ctermfg=darkgrey guifg=grey60
highlight SpecialKey ctermfg=darkgrey guifg=grey60

set number

set scrolloff=2

let g:ycm_clangd_binary_path = trim(system('brew --prefix llvm')).'/bin/clangd'

let g:NERDTreeWinPos = "left"
let g:indent_guides_enable_on_vim_startup = 0

" Disable auto-pair from putting cursor in the center-line when opening a 'pair'
let g:AutoPairsCenterLine = 0

" map <leader>go :!gitopen<cr>

" Terraform language server
if executable('terraform-ls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'terraform-ls',
        \ 'cmd': {server_info->['terraform-ls', 'serve']},
        \ 'whitelist': ['terraform'],
        \ })
endif

call plug#begin('~/.vim_runtime/my_plugins')
Plug 'junegunn/vim-plug'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }


call plug#end()

" Kubernetes templating
if has("autocmd")
  augroup templates
    autocmd BufNewFile *.sh 0r ${TOOLING_BASE_DIR}/vim/templates/skeleton.sh
    autocmd BufNewFile *.py 0r ${TOOLING_BASE_DIR}/vim/templates/skeleton.py
  augroup END
  augroup kubernetes_templates
    autocmd BufNewFile clusterrole.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/clusterrole.yaml
    autocmd BufNewFile clusterrolebinding.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/clusterrolebinding.yaml
    autocmd BufNewFile common-labels.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/common-labels.yaml
    autocmd BufNewFile configmap.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/configmap.yaml
    autocmd BufNewFile deployment.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/deployment.yaml
    autocmd BufNewFile ingress.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/ingress.yaml
    autocmd BufNewFile kustomization.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/kustomization.yaml
    autocmd BufNewFile namespace.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/namespace.yaml
    autocmd BufNewFile pv.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/pv.yaml
    autocmd BufNewFile pvc.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/pvc.yaml
    autocmd BufNewFile role.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/role.yaml
    autocmd BufNewFile rolebinding.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/rolebinding.yaml
    autocmd BufNewFile secret.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/secret.yaml
    autocmd BufNewFile service.yaml 0r ${TOOLING_BASE_DIR}/vim/templates/kubernetes/service.yaml
  augroup END
endif

" GoLang
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_types = 1
let g:go_highlight_variable_declarations = 1

let g:go_fmt_command = "goimports"
